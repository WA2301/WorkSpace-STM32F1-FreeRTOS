


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         
    3 00000000         ;   EXTERN  OSRunning                                   
                               ; External references
    4 00000000         ;    EXTERN  OSPrioCur 用于存储当前任务的优先级
    5 00000000 00000000 
                       OSPrioCur
                               EQU              0
    6 00000000         ;    EXTERN  OSPrioHighRdy
    7 00000000 00000000 
                       OSPrioHighRdy
                               EQU              0
    8 00000000                 EXTERN           OSTCBCur
    9 00000000                 EXTERN           OSTCBHighRdy
   10 00000000                 EXTERN           OSIntNesting
   11 00000000                 EXTERN           OSIntExit
   12 00000000                 EXTERN           OSTaskSwHook
   13 00000000         
   14 00000000         
   15 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   16 00000000                 EXPORT           OS_CPU_SR_Restore
   17 00000000                 EXPORT           OSStartHighRdy
   18 00000000                 EXPORT           OSCtxSw
   19 00000000                 EXPORT           OS_CPU_PendSVHandler
   20 00000000         
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000         ;                                                EQUATES
                       
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         
   25 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   26 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   27 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   28 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   29 00000000         
   30 00000000         ;*******************************************************
                       *************************************************
   31 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   32 00000000         ;*******************************************************
                       *************************************************
   33 00000000         
   34 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=



ARM Macro Assembler    Page 2 


2
   35 00000000                 THUMB
   36 00000000                 REQUIRE8
   37 00000000                 PRESERVE8
   38 00000000         
   39 00000000         
   40 00000000         
   41 00000000         
   42 00000000         
   43 00000000         
   44 00000000         
   45 00000000         
   46 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   47 00000000         ;                          :
   48 00000000         ;                          :
   49 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   50 00000000         ;                          :
   51 00000000         ;                          :
   52 00000000         
   53 00000000         OS_CPU_SR_Save
   54 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   55 00000004 B672            CPSID            I
   56 00000006 4770            BX               LR
   57 00000008         
   58 00000008         OS_CPU_SR_Restore
   59 00000008 F380 8810       MSR              PRIMASK, R0
   60 0000000C 4770            BX               LR
   61 0000000E         
   62 0000000E         ;*******************************************************
                       *************************************************
   63 0000000E         ;                                          START MULTITA
                       SKING
   64 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
   65 0000000E         ;
   66 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
   67 0000000E         ;              the first task to start.
   68 0000000E         ;
   69 0000000E         ;           2) OSStartHighRdy() MUST:
   70 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
   71 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
   72 0000000E         ;              c) Set OSRunning to TRUE;
   73 0000000E         ;              d) Trigger PendSV exception;
   74 0000000E         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
   75 0000000E         ;*******************************************************
                       *************************************************
   76 0000000E         
   77 0000000E         OSStartHighRdy
   78 0000000E 481C            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity



ARM Macro Assembler    Page 3 


   79 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
   80 00000014 7001            STRB             R1, [R0]
   81 00000016         
   82 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
   83 00000018 F380 8809       MSR              PSP, R0
   84 0000001C         
   85 0000001C 4819            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
   86 0000001E 2101            MOVS             R1, #1
   87 00000020 7001            STRB             R1, [R0]
   88 00000022         
   89 00000022 4819            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
   90 00000024 F04F 5180       LDR              R1, =NVIC_PENDSVSET
   91 00000028 6001            STR              R1, [R0]
   92 0000002A         
   93 0000002A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   94 0000002C         
   95 0000002C         OSStartHang
   96 0000002C E7FE            B                OSStartHang ; Should never get 
                                                            here
   97 0000002E         
   98 0000002E         
   99 0000002E         ;*******************************************************
                       *************************************************
  100 0000002E         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  101 0000002E         ;                                           void OSCtxSw
                       (void)
  102 0000002E         ;
  103 0000002E         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  104 0000002E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  105 0000002E         ;*******************************************************
                       *************************************************
  106 0000002E         
  107 0000002E         OSCtxSw
  108 0000002E 4816            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  109 00000030 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  110 00000034 6001            STR              R1, [R0]
  111 00000036 4770            BX               LR
  112 00000038         
  113 00000038         
  114 00000038         ;*******************************************************
                       *************************************************
  115 00000038         ;                                         HANDLE PendSV 
                       EXCEPTION
  116 00000038         ;                                     void OS_CPU_PendSV
                       Handler(void)



ARM Macro Assembler    Page 4 


  117 00000038         ;
  118 00000038         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  119 00000038         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  120 00000038         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  121 00000038         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  122 00000038         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  123 00000038         ;              a thread or occurs due to an interrupt or
                        exception.
  124 00000038         ;
  125 00000038         ;           2) Pseudo-code is:
  126 00000038         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  127 00000038         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  128 00000038         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  129 00000038         ;              d) Call OSTaskSwHook();
  130 00000038         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  131 00000038         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  132 00000038         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  133 00000038         ;              h) Restore R4-R11 from new process stack;
                       
  134 00000038         ;              i) Perform exception return which will re
                       store remaining context.
  135 00000038         ;
  136 00000038         ;           3) On entry into PendSV handler:
  137 00000038         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  138 00000038         ;                 xPSR, PC, LR, R12, R0-R3
  139 00000038         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  140 00000038         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  141 00000038         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  142 00000038         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  143 00000038         ;
  144 00000038         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  145 00000038         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  146 00000038         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  147 00000038         ;*******************************************************
                       *************************************************
  148 00000038         
  149 00000038         OS_CPU_PendSVHandler
  150 00000038 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch



ARM Macro Assembler    Page 5 


  151 0000003A F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  152 0000003E B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  153 00000040         
  154 00000040         ;保存R4-R11 等寄存器，其余由硬件压栈保护
  155 00000040 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  156 00000042 E880 0FF0       STM              R0, {R4-R11}
  157 00000046         
  158 00000046         ;
  159 00000046 4911            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  160 00000048 6809            LDR              R1, [R1]
  161 0000004A 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  162 0000004C         
  163 0000004C         ; At this point, entire context of process has been save
                       d
  164 0000004C         OS_CPU_PendSVHandler_nosave
  165 0000004C         
  166 0000004C         ;保存函数返回地址
  167 0000004C B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  168 0000004E 4810            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  169 00000050 4780            BLX              R0
  170 00000052 F85D EB04       POP              {R14}
  171 00000056         
  172 00000056         
  173 00000056         
  174 00000056 F04F 0000       LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  175 0000005A F04F 0100       LDR              R1, =OSPrioHighRdy
  176 0000005E 780A            LDRB             R2, [R1]
  177 00000060 7002            STRB             R2, [R0]
  178 00000062         
  179 00000062 480A            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  180 00000064 490B            LDR              R1, =OSTCBHighRdy
  181 00000066 680A            LDR              R2, [R1]
  182 00000068 6002            STR              R2, [R0]
  183 0000006A         
  184 0000006A 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  185 0000006C E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  186 00000070 3020            ADDS             R0, R0, #0x20
  187 00000072 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  188 00000076 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack



ARM Macro Assembler    Page 6 


  189 0000007A B662            CPSIE            I
  190 0000007C 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  191 0000007E         
  192 0000007E                 END
              00 00 E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\output
\os_cpu_a.d -o.\output\os_cpu_a.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\PACK\ARM
\CMSIS\3.20.3\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.2\Device\
Include --list=.\list\os_cpu_a.lst BSP\os_cpu_a.asm
